Description: "Cloudformation template for deploying architecture for stripe commissions project" 

Parameters:
  CodeS3Key:
    Type: String
    Description: String of path to the code zip file in the s3 bucket
    Default: lambda.zip
  DatabaseName:
    Type: String
    Description: Name of up to 8 characters to identify your database
    AllowedPattern: "\\w{1,8}"
    Default: exDB
  DBMasterUsername:
    Type: String
    Description: Master username for the DB cluster
    Default: example
  DBMasterUserPassword:
    Type: String
    Description: Master user's password for the DB cluster
    Default: password
  DBInstanceClass:
    Type: String
    Description: Database instance type
    Default: db.t2.small
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: aws-quickstart
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    Default: quickstart-redhat-openshift/
    Type: String
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "String"


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  # Our VPC will need internet access:     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B

  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway   #This bit is critical
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  
  # A NAT Gateway:
  # NATGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt ElasticIPAddress.AllocationId
  #     SubnetId: !Ref PublicSubnetA
  #     Tags:
  #     - Key: Name
  #       Value: !Sub NAT-${AWS::StackName}
  # ElasticIPAddress:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: VPC

  # # Here is a private route table:
  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #     - Key: Name
  #       Value: Private
  # PrivateRoute1:            # Private route table can access web via NAT (created below)
  #   Type: AWS::EC2::Route
  #   DependsOn: NATGateway
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     # Route traffic through the NAT Gateway:
  #     NatGatewayId: !Ref NATGateway

  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   

  # PublicSubnetARouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnetA
  #     RouteTableId: !Ref PublicRouteTable
  # PublicSubnetBRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnetB
  #     RouteTableId: !Ref PublicRouteTable

  # PrivateSubnetARouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnetA
  #     RouteTableId: !Ref PrivateRouteTable
  # PrivateSubnetBRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnetB
  #     RouteTableId: !Ref PrivateRouteTable

  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for our VPC
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: TCP
        ToPort: 3306
      - CidrIp: 0.0.0.0/0
        FromPort: -1
        IpProtocol: icmp
        ToPort: -1
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: TCP
        ToPort: 3306
      - CidrIp: 0.0.0.0/0
        FromPort: -1
        IpProtocol: icmp
        ToPort: -1
      VpcId:
        !Ref VPC
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 Public Instances
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: TCP
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        FromPort: -1
        IpProtocol: icmp
        ToPort: -1

      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: TCP
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        FromPort: -1
        IpProtocol: icmp
        ToPort: -1
      VpcId:
        !Ref VPC

  # Aurora DB instances spanning two subnets/azs
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: AuroraSubnetGroup
      SubnetIds:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB
      - !Ref PublicSubnetB
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBSubnetGroupName:
        !Ref DBSubnetGroup
      DatabaseName:
        !Ref DatabaseName
      Engine: aurora-mysql
      MasterUsername:
        !Ref DBMasterUsername
      MasterUserPassword:
        !Ref DBMasterUserPassword
      VpcSecurityGroupIds:
      - !Ref VPCSecurityGroup
  AuroraNode1:
    Type: AWS::RDS::DBInstance
    DependsOn: AuroraCluster
    Properties:
      DBClusterIdentifier:
        !Ref AuroraCluster
      DBSubnetGroupName:
        !Ref DBSubnetGroup
      Engine: aurora-mysql
      DBInstanceClass:
        !Ref DBInstanceClass
      AvailabilityZone:
        Fn::GetAtt:
        - PrivateSubnetA
        - AvailabilityZone
      PubliclyAccessible: false
  AuroraNode2:
    Type: AWS::RDS::DBInstance
    DependsOn: AuroraCluster
    Properties:
      DBClusterIdentifier:
        !Ref AuroraCluster
      DBSubnetGroupName:
        !Ref DBSubnetGroup
      Engine: aurora-mysql
      DBInstanceClass:
        !Ref DBInstanceClass
      AvailabilityZone:
        Fn::GetAtt:
        - PrivateSubnetB
        - AvailabilityZone
      PubliclyAccessible: false
  AuroraNode3:
    Type: AWS::RDS::DBInstance
    DependsOn: AuroraCluster
    Properties:
      DBClusterIdentifier:
        !Ref AuroraCluster
      DBSubnetGroupName:
        !Ref DBSubnetGroup
      Engine: aurora-mysql
      DBInstanceClass:
        !Ref DBInstanceClass
      AvailabilityZone:
        Fn::GetAtt:
        - PublicSubnetB
        - AvailabilityZone
      PubliclyAccessible: false
    
  EC2Instance1: 
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      ImageId: ami-04dd18caec1f19ec7
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'True'
        DeleteOnTermination: 'True'
        SubnetId:
          !Ref PublicSubnetA
        DeviceIndex: '0'
        GroupSet:
        - !Ref EC2SecurityGroup
    Type: "AWS::EC2::Instance"

  EC2Instance2: 
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      ImageId: ami-04dd18caec1f19ec7
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PrivateSubnetB
    Type: "AWS::EC2::Instance"